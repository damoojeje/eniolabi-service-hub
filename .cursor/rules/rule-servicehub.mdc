---
description:
globs:
alwaysApply: true
---
---
description: Comprehensive Cursor AI Rules for Eniolabi Service Hub Development
globs: ["**/*"]
alwaysApply: true
---

# üö® CRITICAL CURSOR RULES - ENIOLABI.COM SERVICE HUB PROJECT

## **‚ö†Ô∏è MANDATORY: READ THESE RULES BEFORE EVERY PROMPT**

**This project is a Next.js 14.2.32 Service Management Platform with tRPC, Prisma, PostgreSQL, Redis, and NextAuth. You are taking over from Claude Code who has implemented extensive backend functionality that needs UI integration and debugging.**

**ALWAYS CHECK:**
1. **Current deployment status** (Production mode with PM2 on port 3003)
2. **Backend function integration status** (Many APIs need UI connection)
3. **Known critical issues** (JWT decoding errors, API communication failures)
4. **Project scope and goals** (UI/UX integration, no duplicate code creation)

---

## **üéØ PROJECT MISSION & SCOPE**

### **PRIMARY OBJECTIVES (MANDATORY FOCUS):**
1. **Backend-to-UI Integration**: Every backend function MUST have a functional UI access point
2. **Bug Resolution**: Fix "Server communication error" in notes, services, user management  
3. **UI/UX Optimization**: Enhance user experience without creating duplicate functionality
4. **Code Optimization**: Refactor and optimize existing code rather than creating new duplicates
5. **Comprehensive Testing**: Ensure all implemented functions work as designed

### **BACKEND FUNCTIONS REQUIRING UI INTEGRATION:**
| Module | Status | Priority | Issues |
|--------|---------|----------|---------|
| Notes System | ‚ùå API Error | CRITICAL | "Server communication error" when saving |
| Service Configuration | ‚ùå 404 Error | CRITICAL | Service config endpoint not accessible |
| User Management | ‚ùå Not Working | CRITICAL | Admin panel functionality broken |
| Health Monitoring | ‚ö†Ô∏è Partial | HIGH | UI exists but needs integration |
| Analytics Dashboard | ‚ö†Ô∏è Partial | HIGH | Data not displaying correctly |
| Notifications | ‚ö†Ô∏è Partial | HIGH | Real-time updates not working |
| System Settings | ‚ùå Not Accessible | MEDIUM | No UI access point |

### **CRITICAL ISSUES TO RESOLVE:**
1. **JWT/Session Decoding Errors**: Server logs show authentication token issues
2. **tRPC API Communication**: HTTP 204 responses instead of data
3. **Database Query Failures**: Connection established but queries failing
4. **Real-time Updates**: SSE connections dropping frequently

---

## **üö® PRODUCTION DEPLOYMENT RULES (CRITICAL)**

### **Current Status - PRODUCTION MODE ACTIVE:**
- **Server**: PM2 managed Next.js production server
- **Port**: 3003 (FIXED - DO NOT CHANGE)
- **Domain**: eniolabi.com (Nginx proxy configured)
- **Database**: PostgreSQL on port 5433
- **Cache**: Redis on port 6380
- **Mode**: NODE_ENV=production

### **1. NEVER Change Production Configuration**
```bash
# These are FIXED and MUST NOT BE MODIFIED:
- Port 3003 (nginx configured for this)
- PostgreSQL port 5433
- Redis port 6380
- PM2 process name: eniolabi-service-hub
```

### **2. Development Workflow (MANDATORY)**
```bash
# BEFORE making changes:
pm2 logs eniolabi-service-hub --lines 5  # Check current status
curl -I https://eniolabi.com              # Verify site is up

# AFTER making changes:
npm run build                             # Build production assets
pm2 restart eniolabi-service-hub          # Restart production server
curl -I https://eniolabi.com              # Verify site still works
```

### **3. Testing Protocol (MANDATORY)**
```bash
# Test sequence for every change:
https://eniolabi.com                      # Homepage (should load)
https://eniolabi.com/dashboard            # Dashboard (auth required)
https://eniolabi.com/notes               # Notes system (BROKEN - fix me)
https://eniolabi.com/admin/services-config # Service config (404 - fix me)
https://eniolabi.com/admin/users         # User management (BROKEN - fix me)
```

### **4. Log Monitoring (CRITICAL)**
```bash
# Monitor these logs while developing:
pm2 logs eniolabi-service-hub --lines 20  # Application logs
sudo tail -f /var/log/nginx/error.log     # Nginx errors
```

---

## **üõ†Ô∏è CODE ARCHITECTURE & RULES**

### **5. Project Structure Understanding (MANDATORY)**
```
/src/
‚îú‚îÄ‚îÄ app/                    # Next.js App Router pages
‚îú‚îÄ‚îÄ components/            # Reusable UI components
‚îú‚îÄ‚îÄ contexts/             # React Context providers
‚îú‚îÄ‚îÄ features/             # Feature-based modules
‚îú‚îÄ‚îÄ hooks/               # Custom React hooks
‚îú‚îÄ‚îÄ lib/                 # Database, auth, utilities
‚îú‚îÄ‚îÄ server/              # tRPC backend routers
‚îî‚îÄ‚îÄ shared/              # Shared utilities and types
```

### **6. tRPC Backend Integration Rules (CRITICAL)**
```typescript
// Existing routers that MUST be integrated with UI:
- services: Service management and monitoring
- users: User CRUD and role management  
- notifications: Real-time notification system
- notes: Note creation, editing, and organization
- analytics: System metrics and reporting
- health: Service health monitoring
- systemSettings: Application configuration
```

### **7. Database & State Management Rules**
```typescript
// NEVER create new database queries - use existing routers:
import { api } from '@/lib/trpc'           // Client-side tRPC
import { db } from '@/lib/db'              // Server-side Prisma

// Authentication check pattern:
const { data: session } = useSession()    // ALWAYS check auth first
if (!session) return <LoginRequired />    // Handle unauthenticated users
```

### **8. Component Development Rules (CRITICAL)**
```typescript
// BEFORE creating new components, check:
1. /src/components/ - Existing UI components
2. /src/features/   - Feature-specific components  
3. /src/shared/     - Shared utilities

// Component requirements:
- MUST support both light and dark themes
- MUST include error boundaries
- MUST handle loading states
- MUST be responsive (mobile-first)
- MUST include proper TypeScript types
```

---

## **üö® BUG RESOLUTION PRIORITIES**

### **9. Critical Bug Fixes (IMMEDIATE ACTION REQUIRED)**

**Bug #1: Notes System Communication Error**
```typescript
// Location: /src/app/notes/
// Symptoms: "Server communication error" when saving notes
// Likely cause: tRPC router not properly connected
// Action: Debug tRPC client connection in notes pages
```

**Bug #2: Service Configuration 404**
```typescript
// Location: /src/app/admin/services-config/
// Symptoms: 404 error when accessing service configuration
// Likely cause: Missing route or incorrect API endpoint
// Action: Verify route exists and API is properly connected
```

**Bug #3: User Management Not Working**  
```typescript
// Location: /src/app/admin/users/
// Symptoms: Admin panel functionality completely broken
// Likely cause: Authentication middleware or API connection
// Action: Debug authentication flow and API connectivity
```

**Bug #4: JWT Decoding Errors**
```bash
# Seen in logs: JWT/Session decoding failures
# Symptoms: Authentication working but token processing failing
# Action: Debug NextAuth configuration and token handling
```

### **10. Development Testing Requirements**
```bash
# MANDATORY: Test these scenarios after every change:
1. User can log in successfully
2. Dashboard loads without errors
3. Notes can be created, edited, and saved  
4. Service configuration is accessible
5. User management functions work
6. Real-time notifications display
7. System health monitoring works
8. Analytics data displays correctly
```

---

## **üìö EXISTING IMPLEMENTATION GUIDE**

### **11. Authentication System (NextAuth.js)**
```typescript
// Configuration: /src/lib/auth.ts
// Routes: /src/app/api/auth/[...nextauth]/route.ts
// Integration: Session provider in layout
// Status: ‚úÖ Working (admin user active)
```

### **12. Database Layer (Prisma + PostgreSQL)**
```typescript
// Schema: /prisma/schema.prisma
// Client: /src/lib/db.ts  
// Migrations: /prisma/migrations/
// Status: ‚úÖ Connected (PostgreSQL on port 5433)
```

### **13. API Layer (tRPC)**
```typescript
// Main router: /src/server/routers/_app.ts
// Individual routers: /src/server/routers/*.ts
// Client setup: /src/lib/trpc.ts
// Status: ‚ö†Ô∏è Partially working (communication errors)
```

### **14. UI Components (React + Tailwind)**
```typescript
// Base components: /src/components/
// Feature components: /src/features/*/components/
// Styling: Tailwind CSS with dark/light theme support
// Status: ‚ö†Ô∏è Needs integration with backend functions
```

---

## **üö´ CRITICAL RESTRICTIONS**

### **15. NEVER DO These Actions:**
- ‚ùå Change port numbers (3003, 5433, 6380 are FIXED)
- ‚ùå Create duplicate components or utilities
- ‚ùå Modify PM2 ecosystem configuration without testing
- ‚ùå Change database schema without running migrations
- ‚ùå Create new API routes when tRPC routers exist
- ‚ùå Remove existing authentication middleware
- ‚ùå Modify nginx configuration
- ‚ùå Create new state management solutions (use existing contexts)

### **16. ALWAYS DO These Actions:**
- ‚úÖ Test on actual domain (https://eniolabi.com) not localhost
- ‚úÖ Check existing components before creating new ones
- ‚úÖ Use existing tRPC routers instead of creating new APIs
- ‚úÖ Maintain TypeScript strict mode compliance
- ‚úÖ Include proper error handling and loading states
- ‚úÖ Test both dark and light theme compatibility
- ‚úÖ Verify mobile responsiveness
- ‚úÖ Update relevant documentation when making changes

---

## **üîß DEVELOPMENT WORKFLOW**

### **17. Standard Development Process:**
```bash
1. Check current system status:
   pm2 status
   curl -I https://eniolabi.com

2. Identify the backend function needing UI integration:
   Review /src/server/routers/ for available APIs

3. Check existing UI components:
   Review /src/components/ and /src/features/

4. Implement UI integration (NO NEW COMPONENTS if existing ones work)

5. Test the integration:
   npm run build
   pm2 restart eniolabi-service-hub
   Test on https://eniolabi.com

6. Verify no regressions:
   Test all major functions still work
```

### **18. Communication Protocol:**
```typescript
// ALWAYS communicate what you're doing:
1. "Investigating [specific function/bug]"
2. "Found issue in [specific file/location]"  
3. "Implementing fix by [specific approach]"
4. "Testing fix on production domain"
5. "Verified [specific functionality] now works"

// NEVER just say "fixed" without specific testing proof
```

---

## **üìä BACKEND FUNCTION STATUS TABLE**

### **19. Implementation Status Tracking:**
| Function | Backend Router | Frontend UI | Status | Priority |
|----------|----------------|-------------|--------|----------|
| User Authentication | ‚úÖ auth.ts | ‚úÖ signin page | WORKING | - |
| Notes CRUD | ‚úÖ notes.ts | ‚ùå API Error | BROKEN | CRITICAL |
| Service Management | ‚úÖ services.ts | ‚ùå 404 Error | BROKEN | CRITICAL |
| User Management | ‚úÖ users.ts | ‚ùå Not Working | BROKEN | CRITICAL |
| Health Monitoring | ‚úÖ health.ts | ‚ö†Ô∏è Partial UI | PARTIAL | HIGH |
| Analytics | ‚úÖ analytics.ts | ‚ö†Ô∏è No Data | PARTIAL | HIGH |
| Notifications | ‚úÖ notifications.ts | ‚ö†Ô∏è No Real-time | PARTIAL | HIGH |
| System Settings | ‚úÖ systemSettings.ts | ‚ùå No UI | MISSING | MEDIUM |
| File Uploads | ‚úÖ avatar route | ‚úÖ Profile page | WORKING | - |
| Event Stream | ‚úÖ events route | ‚ö†Ô∏è SSE Issues | PARTIAL | HIGH |

### **20. Testing Verification Table:**
| Test Case | Expected Result | Current Result | Status |
|-----------|----------------|----------------|---------|
| Login as admin | Dashboard loads | ‚úÖ Working | PASS |
| Create new note | Note saved successfully | ‚ùå Server error | FAIL |
| Access service config | Config panel loads | ‚ùå 404 error | FAIL |
| View user list | Users display | ‚ùå Not working | FAIL |
| Check system health | Health metrics show | ‚ö†Ô∏è Partial data | PARTIAL |
| Real-time notifications | Updates automatically | ‚ùå No updates | FAIL |

---

## **üéØ SUCCESS CRITERIA**

### **21. Project Completion Definition:**
The project is complete when:
1. ‚úÖ Every backend function has a working UI access point
2. ‚úÖ All critical bugs are resolved (notes, services, users)
3. ‚úÖ Real-time features work correctly (notifications, health monitoring)
4. ‚úÖ UI/UX is optimized for usability and performance
5. ‚úÖ No duplicate code or components exist
6. ‚úÖ All tests pass on production domain
7. ‚úÖ Documentation is updated and accurate

### **22. Quality Assurance Requirements:**
- All TypeScript errors resolved
- ESLint warnings addressed
- Production build succeeds without errors
- All API endpoints respond correctly
- Authentication flow works seamlessly
- Mobile responsiveness verified
- Dark/light theme compatibility confirmed
- Performance metrics are acceptable

---

## **üìù CONTEXT FILE MANAGEMENT**

### **23. Claude Context Files (MANDATORY):**
Every folder MUST contain a `.claude-context` file with:
- Purpose of the folder
- Key files and their functions  
- Integration points with other modules
- Known issues or considerations
- Testing requirements

Update these files when making changes to maintain project knowledge.

---

## **üóÇÔ∏è FILE MANAGEMENT AND CLEANUP RULES**

### **24. Temporary File Management (MANDATORY):**
- **ALL temporary, test, placeholder, or experimental files MUST be placed in `/delete/` folder after use**
- **NEVER leave temporary files scattered throughout the project structure**
- Examples of files that must go in `/delete/`:
  - `*.tmp`, `*.temp`, `*_backup`, `*_old` files
  - Test files ending in `.test.js`, `.test.ts`, `.spec.js`, `.spec.ts`
  - Placeholder components or incomplete experimental code
  - Debug files, log files created during development
  - Duplicate files created during refactoring

### **25. Delete Folder Protocol:**
```bash
# Always use /delete/ folder for cleanup:
mkdir -p /delete
mv temp_file.ts /delete/
mv experimental_component.tsx /delete/
mv old_backup.json /delete/
```

### **26. Project Cleanliness Requirements:**
- **Keep project root and all subdirectories clean at all times**
- **Remove or relocate any files not directly needed for production**
- **Consolidate redundant documentation into core documentation files**
- **User will manually review and permanently delete contents of `/delete/` folder**

---

**Last Updated**: September 3, 2025
**Status**: ACTIVE - All rules are mandatory
**Next Phase**: Backend-to-UI integration and critical bug resolution
**Contact**: Hand-off from Claude Code to Cursor AI Agent